// задача 1
// Задание
// Функция calculateTotalPrice(orderedItems) принимает один параметр orderedItems - массив чисел, и рассчитывает общую сумму его элементов, которая сохраняется в переменной totalPrice и возвращается как результат работы функции.

// Выполни рефакторинг функции так, чтобы вместо цикла for она использовала метод forEach.

// Тесты
// Объявлена функция calculateTotalPrice(orderedItems).
// Для перебора массива orderedItems использован метод forEach.
// Вызов функции calculateTotalPrice([12, 85, 37, 4]) возвращает 138.
// Вызов функции calculateTotalPrice([164, 48, 291]) возвращает 503.
// Вызов функции calculateTotalPrice([412, 371, 94, 63, 176]) возвращает 1116.
// Вызов функции со случайными, но валидными аргументами, возвращает правильное значение.



// function calculateTotalPrice(orderedItems) {
//     let totalPrice = 0;
//     // Пиши код ниже этой строки
  
//     for (let i = 0; i < orderedItems.length; i += 1) {
//       totalPrice += orderedItems[i];
//     }
  
//     // Пиши код выше этой строки
//     return totalPrice;
//   }




// function calculateTotalPrice(orderedItems) {
//     let totalPrice = 0;
//     // Пиши код ниже этой строки
  
//     orderedItems.forEach(function callBack (orderedItem) {
//       totalPrice += orderedItem});
  
//     // Пиши код выше этой строки
//     return totalPrice;
//   }


  // задача 2
//   Задание
//   Функция filterArray(numbers, value) принимает массив чисел numbers и возвращает новый массив, в котором будут только те элементы оригинального массива, которые больше чем значение параметра value.
  
//   Выполни рефакторинг функции так, чтобы вместо цикла for она использовала метод forEach.
  
//   Тесты
//   Объявлена функция filterArray(numbers, value).
//   Для перебора массива numbers использован метод forEach.
//   Вызов функции filterArray([1, 2, 3, 4, 5], 3) возвращает [4, 5].
//   Вызов функции filterArray([1, 2, 3, 4, 5], 4) возвращает [5].
//   Вызов функции filterArray([1, 2, 3, 4, 5], 5) возвращает [].
//   Вызов функции filterArray([12, 24, 8, 41, 76], 38) возвращает [41, 76].
//   Вызов функции filterArray([12, 24, 8, 41, 76], 20) возвращает [24, 41, 76].
//   Вызов функции со случайными, но валидными аргументами, возвращает правильное значение.



//   function filterArray(numbers, value) {
//     const filteredNumbers = [];
//     // Пиши код ниже этой строки
  
//     for (let i = 0; i < numbers.length; i += 1) {
//       if (numbers[i] > value) {
//         filteredNumbers.push(numbers[i]);
//       }
//     }
  
//     // Пиши код выше этой строки
//     return filteredNumbers;
//   }







  // задача 3
  // задача 4
  // задача 5
  // задача 6
  // задача 7
  // задача 8
  // задача 9
//   Задание
//   Функция changeEven(numbers, value) принимает массив чисел numbers и обновляет каждый элемент, значение которого это чётное число, добавляя к нему значение параметра value.
  
//   Выполни рефакторинг функции так, чтобы она стала чистой - не изменяла массив чисел numbers, а создавала, наполняла и возвращала новый массив с обновлёнными значениями.
  
//   Тесты
//   Объявлена функция changeEven(numbers, value).
//   Функция changeEven не изменяет значение параметра numbers.
//   Вызов changeEven([1, 2, 3, 4, 5], 10) возвращает новый массив [1, 12, 3, 14, 5].
//   Вызов changeEven([2, 8, 3, 7, 4, 6], 10) возвращает новый массив [12, 18, 3, 7, 14, 16].
//   Вызов changeEven([17, 24, 68, 31, 42], 100) возвращает новый массив [17, 124, 168, 31, 142].
//   Вызов changeEven([44, 13, 81, 92, 36, 54], 100) возвращает новый массив [144, 13, 81, 192, 136, 154].
//   Вызов функции со случайными, но валидными аргументами, возвращает правильное значение.


//   function changeEven(numbers, value) {
//     // Пиши код ниже этой строки
//     for (let i = 0; i < numbers.length; i += 1) {
//       if (numbers[i] % 2 === 0) {
//         numbers[i] = numbers[i] + value;
//       }
//     }
//     // Пиши код выше этой строки
//   }




//   function changeEven(numbers, value) {
//     // Пиши код ниже этой строки
//   const newArr = [];
//     numbers.forEach((number) => {
//       if (number % 2 === 0) {
//     number += value;
//        } 
//        newArr.push(number);
// });
//   return newArr;
//     // Пиши код выше этой строки
//   }

  // задача 10
//   Задание
//   Дополни код так, чтобы в переменной planetsLengths получился массив длин названий планет. Обязательно используй метод map().
  
//   Тесты
//   Объявлена переменная planets.
//   Значение переменной planets это массив ['Земля', 'Марс', 'Венера', 'Юпитер'].
//   Объявлена переменная planetsLengths.
//   Значение переменной planetsLengths это массив [5, 4, 6, 6].
//   Для перебора массива планет использован метод map().

//   const planets = ['Земля', 'Марс', 'Венера', 'Юпитер'];
//   // Пиши код ниже этой строки
//   const planetsLengths = planets;





// const planets = ['Земля', 'Марс', 'Венера', 'Юпитер'];
// // Пиши код ниже этой строки
// const planetsLengths = planets.map((planet) => planet.length);

  // задача 11
//   Задание
//   Используя метод map() сделай так, чтобы в переменной titles получился массив названий книг (свойство title) из всех объектов массива books.
  
//   Тесты
//   Объявлена переменная books.
//   Значение переменной books это массив.
//   Объявлена переменная titles.
//   Значение переменной titles это массив ['Последнее королевство', 'На берегу спокойных вод', 'Сон смешного человека', 'Красна как кровь', 'Враг Божий'].
//   Для перебора массива books используется метод map() как чистая функция.


//   const books = [
//     { title: 'Последнее королевство', author: 'Бернард Корнуэлл', rating: 8.38 },
//     { title: 'На берегу спокойных вод', author: 'Роберт Шекли', rating: 8.51 },
//     { title: 'Сон смешного человека', author: 'Федор Достоевский', rating: 7.75 },
//     { title: 'Красна как кровь', author: 'Ли Танит', rating: 7.94 },
//     { title: 'Враг Божий', author: 'Бернард Корнуэлл', rating: 8.67 }
//   ];
//   // Пиши код ниже этой строки
  
//   const titles = books;




// const books = [
//     { title: 'Последнее королевство', author: 'Бернард Корнуэлл', rating: 8.38 },
//     { title: 'На берегу спокойных вод', author: 'Роберт Шекли', rating: 8.51 },
//     { title: 'Сон смешного человека', author: 'Федор Достоевский', rating: 7.75 },
//     { title: 'Красна как кровь', author: 'Ли Танит', rating: 7.94 },
//     { title: 'Враг Божий', author: 'Бернард Корнуэлл', rating: 8.67 }
//   ];
//   // Пиши код ниже этой строки
  
//   const titles = books.map(book => book.title);

  // задача 12
//   Задание
//   Используя метод flatMap() сделай так, чтобы в переменной genres получился массив всех жанров книг (свойство genres) из массива книг books.
  
//   Тесты
//   Объявлена переменная books.
//   Значение переменной books это массив объектов.
//   Объявлена переменная genres.
//   Значение переменной genres это массив [ 'приключения', 'историческое', 'фантастика', 'ужасы', 'мистика' ].
//   Для перебора массива books используется метод flatMap().


//   const books = [
//     {
//       title: 'Последнее королевство',
//       author: 'Бернард Корнуэлл',
//       genres: ['приключения', 'историческое']
//     },
//     {
//       title: 'На берегу спокойных вод',
//       author: 'Роберт Шекли',
//       genres: ['фантастика']
//     },
//     {
//       title: 'Красна как кровь',
//       author: 'Ли Танит',
//       genres: ['ужасы', 'мистика']
//     }
//   ];
//   // Пиши код ниже этой строки
  
//   const genres = books;





// const books = [
//     {
//       title: 'Последнее королевство',
//       author: 'Бернард Корнуэлл',
//       genres: ['приключения', 'историческое']
//     },
//     {
//       title: 'На берегу спокойных вод',
//       author: 'Роберт Шекли',
//       genres: ['фантастика']
//     },
//     {
//       title: 'Красна как кровь',
//       author: 'Ли Танит',
//       genres: ['ужасы', 'мистика']
//     }
//   ];
//   // Пиши код ниже этой строки
  
//   const genres = books.flatMap((book) => book.genres);

  // задача 13
//   Задание
//   Дополни функцию getUserNames(users) так, чтобы она возвращала массив имён пользователей (свойство name) из массива объектов в параметре users.
  
//   Тесты
//   Объявлена переменная getUserNames.
  
//   Переменной getUserNames присвоена стрелочная функция с параметром (users).
  
//   Для перебора параметра users используется метод map().
  
//   Вызов функции с указанным массивом пользователей возвращает массив ['Moore Hensley', 'Sharlene Bush', 'Ross Vazquez', 'Elma Head', 'Carey Barr', 'Blackburn Dotson', 'Sheree Anthony'].
  
//   Вызов функции со случайными, но валидными аргументами, возвращает правильное значение.

// // Пиши код ниже этой строки
// const getUserNames = users => {
    

// };
// // Пиши код выше этой строки




// // Пиши код ниже этой строки
// const getUserNames = users => 
//     users.map(user => user.name)
              
//   ;
              
//   // Пиши код выше этой строки

  // задача 14
//   Задание
//   Дополни функцию getUserEmails(users) так, чтобы она возвращала массив почтовых адресов пользователей (свойство email) из массива объектов в параметре users.
  
//   Тесты
//   Объявлена переменная getUserNames.
//   Переменной getUserNames присвоена стрелочная функция с параметром (users).
//   Для перебора параметра users используется метод map().
//   Вызов функции с указанным массивом пользователей возвращает массив ['moorehensley@indexia.com', 'sharlenebush@tubesys.com', 'rossvazquez@xinware.com', 'elmahead@omatom.com', 'careybarr@nurali.com', 'blackburndotson@furnigeer.com', 'shereeanthony@kog.com'].
//   Вызов функции со случайными, но валидными аргументами, возвращает правильное значение.


//   const getUserEmails = users => {
    

// };



// const getUserEmails = users => users.map(user => user.email)
    

//   ;



  // задача 15
//   Задание
//   Дополни код так, чтобы в переменной evenNumbers получился массив чётных чисел из массива numbers, а в переменной oddNumbers массив нечётных. Обязательно используй метод filter().
  
//   Тесты
//   Объявлена переменная numbers.
//   Значение переменной numbers это массив [17, 24, 82, 61, 36, 18, 47, 52, 73].
//   Объявлена переменная evenNumbers.
//   Значение переменной evenNumbers это массив [24, 82, 36, 18, 52].
//   Объявлена переменная oddNumbers.
//   Значение переменной oddNumbers это массив [17, 61, 47, 73].
//   Для перебора массива numbers использован метод filter().


//   const numbers = [17, 24, 82, 61, 36, 18, 47, 52, 73];
//   // Пиши код ниже этой строки
  
//   const evenNumbers = numbers;
//   const oddNumbers = numbers;


// const numbers = [17, 24, 82, 61, 36, 18, 47, 52, 73];
// // Пиши код ниже этой строки

// const evenNumbers = numbers.filter(number => number % 2 === 0);
// const oddNumbers = numbers.filter(number => number % 2 == 1);


  // задача 16
//   Задание
//   Дополни код так, чтобы в переменной allGenres был массив всех жанров книг (свойство genres) из массива books, а в переменной uniqueGenres массив уникальных жанров - без повторений.
  
//   Тесты
//   Объявлена переменная books.
//   Значение переменной books это массив объектов.
//   Объявлена переменная allGenres.
//   Значение переменной allGenres это массив ['приключения', 'историческое', 'фантастика', 'мистика', 'ужасы', 'мистика', 'приключения'].
//   Объявлена переменная uniqueGenres.
//   Значение переменной uniqueGenres это массив ['приключения', 'историческое', 'фантастика', 'мистика', 'ужасы'].
//   Для вычисления значения переменной allGenders использован метод flatMap().
//   Для вычисления значения переменной uniqueGenres использован метод filter().


//   const books = [
//     {
//       title: 'Последнее королевство',
//       author: 'Бернард Корнуэлл',
//       genres: ['приключения', 'историческое']
//     },
//     {
//       title: 'На берегу спокойных вод',
//       author: 'Роберт Шекли',
//       genres: ['фантастика', 'мистика']
//     },
//     {
//       title: 'Красна как кровь',
//       author: 'Ли Танит',
//       genres: ['ужасы', 'мистика', 'приключения']
//     }
//   ];
//   // Пиши код ниже этой строки
//   const allGenres = books;
//   const uniqueGenres = allGenres;



// const allGenres = books.flatMap((book) => book.genres);
//   const uniqueGenres = allGenres.filter(
//   (genre, index, array) => array.indexOf(genre) === index);

  // задача 17
//   Задание
//   Используя метод filter() дополни код так, чтобы:
  
//   В переменной topRatedBooks получился массив книг рейтинг которых (свойство rating) больше либо равно значению переменной MIN_RATING.
//   В переменной booksByAuthor получился массив книг написанных автором с именем (свойство author) которое совпадает со значением в переменной AUTHOR.
//   Тесты
//   Объявлена переменная books.
//   Значение переменной books это массив объектов.
//   Объявлена переменная MIN_RATING.
//   Значение переменной MIN_RATING это число 8.
//   Объявлена переменная AUTHOR.
//   Значение переменной AUTHOR это строка 'Бернард Корнуэлл'.
//   Объявлена переменная topRatedBooks.
//   Значение переменной topRatedBooks это массив книг с рейтингов выше 8.
//   Объявлена переменная booksByAuthor.
//   Значение переменной booksByAuthor это массив книг автор которых 'Бернард Корнуэлл'.
//   Для перебора массива books использован метод filter().


//   const books = [
//     { title: 'Последнее королевство', author: 'Бернард Корнуэлл', rating: 8.38 },
//     { title: 'На берегу спокойных вод', author: 'Роберт Шекли', rating: 8.51 },
//     { title: 'Сон смешного человека', author: 'Федор Достоевский', rating: 7.75 },
//     { title: 'Красна как кровь', author: 'Ли Танит', rating: 7.94 },
//     { title: 'Враг Божий', author: 'Бернард Корнуэлл', rating: 8.67 }
//   ];
  
//   const MIN_RATING = 8;
//   const AUTHOR = 'Бернард Корнуэлл';
//   // Пиши код ниже этой строки
  
//   const topRatedBooks = books;
//   const booksByAuthor = books;





//   // Пиши код ниже этой строки
//   const topRatedBooks = books.filter((book) => book.rating >= MIN_RATING);
//   const booksByAuthor = books.filter((book) => book.author === AUTHOR) ;

  // задача 18










  
  // задача 19
  // задача 20
  // задача 21
  // задача 22
  // задача 23
  // задача 24
  // задача 25
  // задача 26
  // задача 27
  // задача 28
  // задача 29
  // задача 30
  // задача 31
  // задача 32
  // задача 33
  // задача 34
  // задача 35
  // задача 36
  // задача 37
  // задача 38
  // задача 39
  // задача 40
  // задача 41
  // задача 41
  // задача 43
  // задача 44

